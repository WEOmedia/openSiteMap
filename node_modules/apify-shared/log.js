"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger_text = _interopRequireDefault(require("./logger_text"));

var _logger_json = _interopRequireDefault(require("./logger_json"));

var _log_consts = require("./log_consts");

var _log_helpers = require("./log_helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getDefaultOptions = () => ({
  level: (0, _log_helpers.getLevelFromEnv)(),
  maxDepth: 4,
  maxStringLength: 2000,
  prefix: null,
  suffix: null,
  logger: new _logger_text.default(),
  data: {}
});

class Log {
  constructor(options = {}) {
    options = Object.assign({}, getDefaultOptions(), options);
    if (!_log_consts.LEVEL_TO_STRING[options.level]) throw new Error('Options "level" must be one of log.LEVELS enum!');
    if (typeof options.maxDepth !== 'number') throw new Error('Options "maxDepth" must be a number!');
    if (typeof options.maxStringLength !== 'number') throw new Error('Options "maxStringLength" must be a number!');
    if (options.prefix && typeof options.prefix !== 'string') throw new Error('Options "prefix" must be a string!');
    if (options.suffix && typeof options.suffix !== 'string') throw new Error('Options "suffix" must be a string!');
    if (typeof options.logger !== 'object') throw new Error('Options "logger" must be an object!');
    if (typeof options.data !== 'object') throw new Error('Options "data" must be an object!');
    this.options = options;
    this.deprecationsReported = {};
  }

  _limitDepth(obj) {
    return (0, _log_helpers.limitDepth)(obj, this.options.maxDepth);
  }

  getLevel() {
    return this.options.level;
  }

  setLevel(level) {
    if (!_log_consts.LEVEL_TO_STRING[level]) throw new Error('Options "level" must be one of log.LEVELS enum!');
    this.options.level = level;
  }

  internal(level, message, data, exception) {
    if (level > this.options.level) return;
    data = Object.assign({}, this.options.data, data);
    data = this._limitDepth(data);
    exception = this._limitDepth(exception);
    this.options.logger.log(level, message, data, exception, {
      prefix: this.options.prefix,
      suffix: this.options.suffix
    });
  }

  setOptions(options) {
    this.options = Object.assign({}, this.options, options);
  }

  getOptions() {
    return Object.assign({}, this.options);
  }

  child(options) {
    let {
      prefix
    } = this.options;

    if (options.prefix) {
      prefix = prefix ? `${prefix}${_log_consts.PREFIX_DELIMITER}${options.prefix}` : options.prefix;
    }

    const data = options.data ? Object.assign({}, this.options.data, options.data) : this.options.data;
    const newOptions = Object.assign({}, this.options, options, {
      prefix,
      data
    });
    return new Log(newOptions);
  }

  error(message, data) {
    this.internal(_log_consts.LEVELS.ERROR, message, data);
  }

  exception(exception, message, data) {
    this.internal(_log_consts.LEVELS.ERROR, message, data, exception);
  }

  softFail(message, data) {
    this.internal(_log_consts.LEVELS.SOFT_FAIL, message, data);
  }

  warning(message, data) {
    this.internal(_log_consts.LEVELS.WARNING, message, data);
  }

  info(message, data) {
    this.internal(_log_consts.LEVELS.INFO, message, data);
  }

  debug(message, data) {
    this.internal(_log_consts.LEVELS.DEBUG, message, data);
  }

  perf(message, data) {
    this.internal(_log_consts.LEVELS.PERF, message, data);
  }
  /**
   * Logs given message only once as WARNING. It's used to warn user that some feature he is using
   * has been deprecated.
   */


  deprecated(message) {
    if (this.deprecationsReported[message]) return;
    this.deprecationsReported[message] = true;
    this.warning(message);
  }

}

const log = new Log();
log.Log = Log;
log.LEVELS = _log_consts.LEVELS;
log.LoggerText = _logger_text.default;
log.LoggerJson = _logger_json.default; // Default export is an initialized instance of logger.

var _default = log;
exports.default = _default;
module.exports = exports.default;