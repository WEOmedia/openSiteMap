"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _log_consts = require("./log_consts");

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_OPTIONS = {
  skipLevelInfo: false,
  skipTime: false
};

class LoggerJson extends _logger.default {
  constructor(options = {}) {
    super(Object.assign({}, DEFAULT_OPTIONS, options));
  }

  _log(level, message, data, exception, opts = {}) {
    const {
      prefix,
      suffix
    } = opts;
    if (exception) data = Object.assign({}, data, {
      exception
    });
    if (prefix) message = `${prefix}${_log_consts.PREFIX_DELIMITER} ${message}`;
    if (suffix) message = `${message} ${suffix}`; // Use short names to save log space.
    // In development mode show more concise log otherwise it's impossible to see anything in it.
    // Message must be shown early for people to see!
    // NOTE: not adding time and host on production, because LogDNA adds it by default and log space is expensive

    const rec = Object.assign({
      time: !this.options.skipTime ? new Date() : undefined,
      level: this.options.skipLevelInfo && level === _log_consts.LEVELS.INFO ? undefined : _log_consts.LEVEL_TO_STRING[level],
      msg: message
    }, data);
    const line = JSON.stringify(rec);

    this._outputWithConsole(level, line);

    return line;
  }

}

exports.default = LoggerJson;
module.exports = exports.default;